@Library('hybris-pipeline-libraries')_

pipeline {

  agent any

  stages {
    stage('Reset Platform') {
      when { 
        beforeAgent true
        anyOf { 
          environment name: 'RUN_RESET_PLATFORM_STEP', value: 'true'
        }
      }
      steps {           
        erasePlatform()
        unzipPlatform() 
      }
    } 

    stage('Build') {
      when { 
        beforeAgent true
        anyOf { 
          branch 'full-reports';
          branch 'pr-builder';
          environment name: 'RUN_BUILD_STEP', value: 'true'
        }
      }
      steps {
        antBuilds()
      }
    }

    stage('Generate Deployable') {
      when { 
        beforeAgent true
        anyOf { 
          branch 'develop';
          branch 'hcs-*';
          environment name: 'RUN_PRODUCTION_PACKAGING', value: 'true'
        }
      }
      steps {   
        generateDeployable()
      }
    }

    stage('Deploy to Consolidation') {
      when { 
        beforeAgent true
        anyOf { 
          branch 'develop';
          environment name: 'RUN_DEPLOYMENT_SANDBOX', value: 'true'
        }
      }
      steps {   
        deployToConsolidation()
      }
    }

    stage('Deploy to HCS DEV') {
      when { 
        beforeAgent true
        anyOf { 
          branch 'hcs-dev';
          environment name: 'RUN_DEPLOYMENT_HCS_DEV', value: 'true'
        }
      }
      steps {   
        deployToHCSDev()
      }
    }

    stage('Deploy to HCS QA-Stag-Prod') {
      when { 
        beforeAgent true
        anyOf { 
          branch 'hcs-qa';
          branch 'hcs-stag';
          branch 'hcs-prod';
          environment name: 'RUN_DEPLOYMENT_HCS', value: 'true'
        }
      }
      steps {   
        generateHCSPackage()
        deployToHCS()
      }
    }

    stage('Run Tests') {
      when { 
        beforeAgent true
         anyOf { 
          branch 'full-reports';
          environment name: 'RUN_TESTS_STEP', value: 'true'
        }
      }
      steps {   
        runTests()
      }
    }

    stage('SonarQube') {
      when { 
        beforeAgent true
        anyOf { 
          branch 'full-reports';
          environment name: 'RUN_SONAR_STEP', value: 'true'
        }
      }
      steps {   
        withSonarQubeEnv('SonarQube') {
          sh "ls -al"
          sh "${env.SCANNER_HOME}/bin/sonar-scanner -Djavax.net.debug=all -Djavax.net.debug=ssl:handshake -Dproject.settings=./sonar.properties"
        }   
      }
      post { 
        always { 
          notifySlack "Pipeline ${env.BRANCH_NAME} finished! // Blue Ocean: ${env.RUN_DISPLAY_URL}", env.SLACK_CHANNEL
        }
      }
    }
  }
}
