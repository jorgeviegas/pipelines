@Library('pipeline-library')_

pipeline {

  agent any

  environment {
    RUN_RESET_PLATFORM_STEP = false
    RUN_TESTS_STEP          = true
    RUN_NOTIFY_STEP         = true
    RUN_SONAR_STEP          = false
    RUN_PACKAGING           = false

    PLATFORM_HOME           = 'hybris/bin/platform'
    BINARIES_HOME           = 'hybris/bin/'
    HYBRIS_HOME             = 'hybris/'
    STOREFRONT_NAME         = 'athenasstorefront'
    ANT_INSTALATION         = 'hybris-ant'

    JUNIT_RESULT            = 'hybris/log/junit/TESTS-TestSuites.xml'
    HYBRIS_ZIP              = '../../../../binaries/hybris64.zip'
    ENVIRONMENT_NAME        = 'local'

    //SCANNER_HOME = tool 'SonarQube';
  }

  stages {
    stage('Log Info') {
      steps {           
          echo "Branch: ${env.BRANCH_NAME} "
          echo "Commit: ${env.GIT_COMMIT} "
          echo "###### Steps Config ######"
          echo "RUN_RESET_PLATFORM_STEP: ${env.RUN_RESET_PLATFORM_STEP} "
          echo "RUN_TESTS_STEP: ${env.RUN_TESTS_STEP} "
          echo "RUN_NOTIFY_STEP: ${env.RUN_NOTIFY_STEP} "
          echo "RUN_SONAR_STEP: ${env.RUN_SONAR_STEP} "
      }
    }

    stage('Reset Platform') {
      when {
          beforeAgent true
          environment name: 'RUN_RESET_PLATFORM_STEP', value: 'true'
      }
      steps {           
        erasePlatform()
        unzipPlatform() 
      }
    }
    
    stage('Checkout code from SCM') {
      steps {   
        checkout scm
      }
    }

    stage('Build') {
      steps {
        antBuilds()
      }
    }

    stage('Generate Production Package') {
      when {
          beforeAgent true
          environment name: 'RUN_PACKAGING', value: 'true'
      }
      steps {   
        generatePackage()
      }
    }

    stage('Run Tests') {
      when {
          beforeAgent true
          environment name: 'RUN_TESTS_STEP', value: 'true'
      }
      steps {   
        runTests()
      }
    }

    stage('SonarQube') {
      when {
          beforeAgent true
          environment name: 'RUN_SONAR_STEP', value: 'true'
      }
      steps {   
        withSonarQubeEnv('SonarQube') {
          sh "ls -al"
          sh "${env.SCANNER_HOME}/bin/sonar-scanner -Djavax.net.debug=all -Djavax.net.debug=ssl:handshake -Dproject.settings=./sonar.properties"
        }   
      }
    }

    stage('Notify') {
      when {
          beforeAgent true
          environment name: 'RUN_NOTIFY_STEP', value: 'true'
      }
      steps {   
        notifySlack "Hybris is up and running! Branch: ${env.BRANCH_NAME} // Commit: ${env.GIT_COMMIT}", 'pipelines'
      }
    }
  }
}
